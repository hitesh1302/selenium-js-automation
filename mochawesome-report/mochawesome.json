{
  "stats": {
    "suites": 2,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-03T07:25:10.081Z",
    "end": "2025-09-03T07:25:42.196Z",
    "duration": 32115,
    "testsRegistered": 7,
    "passPercent": 42.857142857142854,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 4,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "a1b2416d-67e5-45cb-acd6-d013f4c591f9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "84af77f2-2947-427d-bb90-9bbd9b6ba4e5",
          "title": "Login page test cases",
          "fullFile": "/Users/acquaint/Selenium-js-automation/selenium-js-automation/test/testcases/login.test.js",
          "file": "/test/testcases/login.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook for \"Login with valid credentials\"",
              "fullTitle": "Login page test cases \"before each\" hook for \"Login with valid credentials\"",
              "timedOut": true,
              "duration": 2117,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "driver = await getDriver();\nloginPage = new LoginPage(driver);\nawait loginPage.open();",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/acquaint/Selenium-js-automation/selenium-js-automation/test/testcases/login.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/acquaint/Selenium-js-automation/selenium-js-automation/test/testcases/login.test.js)\n    at listOnTimeout (node:internal/timers:608:17)\n    at process.processTimers (node:internal/timers:543:7)",
                "diff": null
              },
              "uuid": "606627ff-87af-41ee-a22d-f9161a001ef9",
              "parentUUID": "84af77f2-2947-427d-bb90-9bbd9b6ba4e5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Login page test cases\"",
              "fullTitle": "Login page test cases \"after each\" hook in \"Login page test cases\"",
              "timedOut": false,
              "duration": 57,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await quitDriver(driver);",
              "err": {},
              "uuid": "c907cadc-c700-4c0a-ad47-0936165b0f37",
              "parentUUID": "84af77f2-2947-427d-bb90-9bbd9b6ba4e5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Login with valid credentials",
              "fullTitle": "Login page test cases Login with valid credentials",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await loginPage.changeToEmail();\nawait loginPage.enterUsername(process.env.VALID_USERNAME);\nawait loginPage.enterPassword(process.env.VALID_PASSWORD);\nawait loginPage.clickLogin();\nconst currentUrl = await driver.getCurrentUrl();\nexpect(currentUrl.includes('/dashboard')).to.be.true;",
              "err": {},
              "uuid": "6c942e48-e5c9-4151-a9c4-0096cbe42a57",
              "parentUUID": "84af77f2-2947-427d-bb90-9bbd9b6ba4e5",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Login with invalid credentials",
              "fullTitle": "Login page test cases Login with invalid credentials",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await loginPage.changeToEmail();\nawait loginPage.enterUsername(process.env.INVALID_USERNAME);\nawait loginPage.enterPassword(process.env.INVALID_PASSWORD);\nawait loginPage.clickLogin();\n//const currentUrl = await driver.getCurrentUrl();\n//expect(currentUrl.includes('/dashboard')).to.be.false; \nconst errorMessage = await loginPage.getErrorMessage();\nconsole.log(errorMessage);\nexpect(errorMessage).to.match(/Thông tin Đăng nhập không hợp lệ/);",
              "err": {},
              "uuid": "66abe791-ef49-438e-8d15-dd9bcb8ee0db",
              "parentUUID": "84af77f2-2947-427d-bb90-9bbd9b6ba4e5",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Login with valid credentials using mobile number",
              "fullTitle": "Login page test cases Login with valid credentials using mobile number",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await loginPage.selectCountryCode();\nawait loginPage.enterMobileNumber(process.env.VALID_MNUMBER);\nawait loginPage.enterPassword(process.env.VALID_PASSWORD);\nawait loginPage.clickLogin();\nconst currentUrl = await driver.getCurrentUrl();\nexpect(currentUrl.includes('/dashboard')).to.be.true;",
              "err": {},
              "uuid": "f38acedd-64bb-491d-b27a-768dda15ec15",
              "parentUUID": "84af77f2-2947-427d-bb90-9bbd9b6ba4e5",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Login with Invalid mobile number",
              "fullTitle": "Login page test cases Login with Invalid mobile number",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await loginPage.selectCountryCode();\nawait loginPage.enterMobileNumber(process.env.INVALID_MNUMBER);\nawait loginPage.enterPassword(process.env.INVALID_PASSWORD);\nawait loginPage.clickLogin();\nconst errorMessage = await loginPage.getErrorMessage();\nexpect(errorMessage).to.match(/Thông tin Đăng nhập không hợp lệ/);",
              "err": {},
              "uuid": "61590229-a36e-4a5d-96cc-d46f9d2a2f6f",
              "parentUUID": "84af77f2-2947-427d-bb90-9bbd9b6ba4e5",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "6c942e48-e5c9-4151-a9c4-0096cbe42a57",
            "66abe791-ef49-438e-8d15-dd9bcb8ee0db",
            "f38acedd-64bb-491d-b27a-768dda15ec15",
            "61590229-a36e-4a5d-96cc-d46f9d2a2f6f"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5a11a75a-e82a-4318-b848-3d7db83ba191",
          "title": "Registration page test cases",
          "fullFile": "/Users/acquaint/Selenium-js-automation/selenium-js-automation/test/testcases/registration.test.js",
          "file": "/test/testcases/registration.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Registration page test cases\"",
              "fullTitle": "Registration page test cases \"before each\" hook in \"Registration page test cases\"",
              "timedOut": false,
              "duration": 1655,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(30000);\ndriver = await getDriver();\nregistrationPage = new RegistrationPage(driver);\nawait registrationPage.open();",
              "err": {},
              "uuid": "15738416-79ad-4fd0-8015-81183ab01e37",
              "parentUUID": "5a11a75a-e82a-4318-b848-3d7db83ba191",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Registration page test cases\"",
              "fullTitle": "Registration page test cases \"after each\" hook in \"Registration page test cases\"",
              "timedOut": false,
              "duration": 56,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await quitDriver(driver);",
              "err": {},
              "uuid": "4d6df66e-b15b-4419-b5e0-ac6d3a59086a",
              "parentUUID": "5a11a75a-e82a-4318-b848-3d7db83ba191",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Register with valid details",
              "fullTitle": "Registration page test cases Register with valid details",
              "timedOut": false,
              "duration": 14509,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUser = getFakeUser();\nawait registrationPage.enterFullName(fakeUser.name);\nawait registrationPage.selectCountryCode();\nawait registrationPage.enterMobileNumber(fakeUser.phone);\nawait registrationPage.enterEmail(fakeUser.email);\nawait registrationPage.enterPassword(process.env.PASSWORD);\nawait registrationPage.enterConfirmPassword(process.env.CONFIRM_PASSWORD);\nawait registrationPage.acceptTermsAndConditions();\nawait registrationPage.clickRegister();\nconst valiationMessage = await registrationPage.getValidationMessage();\nexpect(valiationMessage).to.match(/Ghi danh thành công. Vui lòng xác minh email của bạn./);",
              "err": {},
              "uuid": "5ed42c6a-ecdd-4590-9f71-c8545982dfea",
              "parentUUID": "5a11a75a-e82a-4318-b848-3d7db83ba191",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Register with same email and mobile number",
              "fullTitle": "Registration page test cases Register with same email and mobile number",
              "timedOut": false,
              "duration": 6720,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await registrationPage.enterFullName(process.env.FULL_NAME);\nawait registrationPage.selectCountryCode();\nawait registrationPage.enterMobileNumber(process.env.MNUMBER);\nawait registrationPage.enterEmail(process.env.EMAIL_ID);\nawait registrationPage.enterPassword(process.env.PASSWORD);\nawait registrationPage.enterConfirmPassword(process.env.CONFIRM_PASSWORD);\nawait registrationPage.acceptTermsAndConditions();\nawait registrationPage.clickRegister();\nconst ValidationMessage = await registrationPage.getValidationMessage();\nconsole.log(\"Message is: \", ValidationMessage);\nexpect(ValidationMessage).to.match(/Email hoặc số Điện thoại đã tồn tại./);",
              "err": {},
              "uuid": "a84689bf-928d-4e1d-8c18-c4f0ea100750",
              "parentUUID": "5a11a75a-e82a-4318-b848-3d7db83ba191",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Register with invalid details",
              "fullTitle": "Registration page test cases Register with invalid details",
              "timedOut": false,
              "duration": 3644,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await registrationPage.enterFullName(process.env.FULL_NAME);\nawait registrationPage.selectCountryCode();\nawait registrationPage.enterMobileNumber(process.env.INVALID_MNUMBER);\nawait registrationPage.enterEmail(process.env.INVALID_EMAIL);\nawait registrationPage.enterPassword(process.env.INVALID_PASSWORD);\nawait registrationPage.enterConfirmPassword(process.env.PASSWORD);\nawait registrationPage.acceptTermsAndConditions();\nawait registrationPage.clickRegister();\nconst currentUrl = await driver.getCurrentUrl();\nexpect(currentUrl.includes('/registration')).to.be.true;",
              "err": {},
              "uuid": "6f5f4c31-bc2d-4d0f-9ac3-04d40cc24b04",
              "parentUUID": "5a11a75a-e82a-4318-b848-3d7db83ba191",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5ed42c6a-ecdd-4590-9f71-c8545982dfea",
            "a84689bf-928d-4e1d-8c18-c4f0ea100750",
            "6f5f4c31-bc2d-4d0f-9ac3-04d40cc24b04"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24873,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}